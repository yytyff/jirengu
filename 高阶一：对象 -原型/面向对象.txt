面向对象：

目的：
1.改善可读性
2.提升重要性

原则：开放封闭原则

1.对于扩展是开放的，当应用的需求改变时，我们可以对模块进行扩展，
使其具有满足那些改变的新行为。

2.对于修改是关闭的。对模块行为进行扩展时，不必改动模块的源代码或者二进制代码。

三要素：封装、继承、多态

------------------------------------
类：上帝创造万物

面向对象可以解释任何事物

object: _proto_  toString  valueOf 

1, Array :length push  2,Function: length call

继承：你有的我都有 ，封装：把一些方法包在一起 

多态：
举例：动物，有不同的叫声，猫的叫声，狐狸有叫声，不同的表现。可以理解为多态

--------------------------
对象：将类实例化
var object = new Object()

类是图纸
将图纸实现（实例化、放入内存）就是对象

var image  =new Image()

想象上帝创造猫这个类，然后创造一个猫的实例。
-------------------------------------------------
小结：
1.将一些属性和方法封装在一起叫类
2.类可以继承类（父类与子类）
3.将类实例化，就有了对象
4.对象拥有类的属性和方法、父类的属性和方法、父类的父类。。。
5.多态：不同对象的同一个方法，可以有不同的表现

------------------------------
javascript使用原型链实现继承 
java 使用Class实现继承

1.创建一个空对象作为this
2.this._proto_指向构造函数的prototype
3.运行构造函数
4.返回this（如果构造函数没有return）
```
var Foo =function(){
   this.name = 'foo'
}
var foo =new Foo()
{}._proto_ ==>Foo.prototype
{}.name ='foo'
```
----------------------------
1.学习object.create()

js 实现一个类
其实只是一个构造函数

var Animal =function(){this.种类 ='动物'}
Animal.prototype.say =function(){console.log(this.种类 + '叫')}

实例化，得到一个对象
var animal =new Animal()
animal.say()

console.dir(animal)

--------------------------------------
prototype是原型对象：


每个函数都自动添加一个名称为prototype属性，这是一个对象

每个对象都有一个内部属性 __proto__(规范中没有指定这个名称，但是浏览器都这么实现的) 
指向其类型的prototype属性，类的实例也是对象，其__proto__属性指向“类”的prototype

所有实例都会通过原型链引用到类型的prototype

prototype相当于特定类型所有实例都可以访问到的一个公共容器







